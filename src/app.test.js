/* ðŸ”¥ðŸ”¥
  ðŸ‘‰ DO NOT EDIT THIS FILE ðŸ‘ˆ
ðŸ”¥ðŸ”¥ */
import { assert } from 'chai'
import { after } from 'mocha'

import { build } from './app.js'

let app = build()

after(() => {
  app.close()
})

describe('GET /', () => {
  it('should returns a 200', async () => {
    const response = await app.inject({ method: 'GET', url: '/' })

    assert.equal(response.statusCode, 200)
  })

  it('return json format', async () => {
    const response = await app.inject({ method: 'GET', url: '/' })

    assert.propertyVal(
      response.headers,
      'content-type',
      'application/json; charset=utf-8',
    )
    assert.deepStrictEqual(response.json(), { message: 'Server is running' })
  })
})

describe('GET /hello', () => {
  it('returns json format', async () => {
    const response = await app.inject({ method: 'GET', url: '/hello' })

    assert.strictEqual(response.statusCode, 200)
    assert.deepStrictEqual(response.json(), { message: 'Hello world' })
  })
})

describe('GET /hello?name=<params>', () => {
  it('returns "Hello world" if no name is passed', async () => {
    const response = await app.inject({
      method: 'GET',
      url: '/hello',
      query: { name: '' },
    })

    assert.deepStrictEqual(response.json(), { message: 'Hello world' })
  })

  it('returns "Hello Bob" is Bob is passed as the name', async () => {
    const response = await app.inject({
      method: 'GET',
      url: '/hello',
      query: { name: 'Bob' },
    })

    assert.deepStrictEqual(response.json(), { message: 'Hello Bob' })
  })

  it('returns "Hello <name>", whatever the "<name>" is', async () => {
    const name = `Alice${Date.now()}` // random string for testing purpose
    const response = await app.inject({
      method: 'GET',
      url: '/hello',
      query: { name },
    })

    assert.deepStrictEqual(response.json(), { message: `Hello ${name}` })
  })
})

describe('GET /notfound', () => {
  const url = `/notfound-${Date.now()}` // random string for test purpose
  it('returns error an message with status code 404', async () => {
    const response = await app.inject({ method: 'GET', url })

    assert.strictEqual(response.statusCode, 404)
    assert.deepStrictEqual(response.json(), {
      error: 'Not Found',
      message: `Route GET:${url} not found`,
      statusCode: 404,
    })
  })
})

describe('POST /message', () => {
  it('returns a success message along with the `message` and `random` properties sent', async () => {
    const data = {
      message: 'Hello world',
      random: `${Date.now()}`, // random string for testing purpose
    }
    const response = await app.inject({
      url: '/message',
      method: 'POST',
      payload: data,
    })

    assert.deepStrictEqual(response.json(), {
      message: 'Message received',
      data,
    })
  })

  it('should only return `message` and `random`', async () => {
    const response = await app.inject({
      url: '/message',
      method: 'POST',
      payload: {
        message: 'Hello world',
        random: `not-so-random-value`,
        extra: 'Extra data',
      },
    })

    assert.deepStrictEqual(response.json(), {
      message: 'Message received',
      data: {
        message: 'Hello world',
        random: `not-so-random-value`,
      },
    })
  })

  it('return an error if "message" is missing', async () => {
    const data = { name: 'Bob' }
    const response = await app.inject({
      url: '/message',
      method: 'POST',
      payload: data,
    })

    assert.strictEqual(response.statusCode, 400)
    assert.deepStrictEqual(response.json(), {
      error: 'Bad Request',
      message: "body should have required property 'message'",
      statusCode: 400,
    })
  })
})

/*
  Let's implement some fake routes for practice, with some hard coded data
*/
describe('GET /articles', () => {
  it('returns fake data', async () => {
    const response = await app.inject({ method: 'GET', url: '/articles' })

    assert.deepStrictEqual(response.json(), [
      { id: 1, title: 'Fake article 1' },
      { id: 2, title: 'Fake article 2' },
    ])
  })
})

describe('GET /articles/:id', () => {
  it('returns fake article 1', async () => {
    const response1 = await app.inject({ method: 'GET', url: '/articles/1' })
    assert.deepStrictEqual(response1.json(), { id: 1, title: 'Fake article 1' })

    const response2 = await app.inject({ method: 'GET', url: '/articles/2' })
    assert.deepStrictEqual(response2.json(), { id: 2, title: 'Fake article 2' })
  })

  it('returns 404 not found if the article does not exists', async () => {
    const response = await app.inject({ method: 'GET', url: '/articles/100' })

    assert.strictEqual(response.statusCode, 404)
    assert.deepStrictEqual(response.json(), { error: `Article 100 not found` })
  })
})

describe('POST /articles', () => {
  it('POST /articles with a title returns a 201 with a message saying that the article was created', async () => {
    const response = await app.inject({
      method: 'POST',
      url: '/articles',
      payload: { title: 'Another fake news' },
    })

    assert.strictEqual(response.statusCode, 201)
    assert.deepStrictEqual(response.json(), { message: `Article created` })
  })
})

describe('DELETE /articles/:id', () => {
  it('returns a 200 if the article exists', async () => {
    const response = await app.inject({
      method: 'DELETE',
      url: '/articles/1',
    })

    assert.strictEqual(response.statusCode, 200)
    assert.deepStrictEqual(response.json(), { message: `Article deleted` })
  })

  it('returns a 404 since the article does not exists', async () => {
    const response = await app.inject({
      method: 'DELETE',
      url: '/articles/101',
    })

    assert.strictEqual(response.statusCode, 404)
    assert.deepStrictEqual(response.json(), { error: `Article 101 not found` })
  })

  it('returns a 404 since the article does not exists (random id)', async () => {
    const id = Math.ceil(Math.random() * 100) + 10
    const response = await app.inject({
      method: 'DELETE',
      url: `/articles/${id}`,
    })
    assert.strictEqual(response.statusCode, 404)
    assert.deepStrictEqual(response.json(), {
      error: `Article ${id} not found`,
    })
  })
})